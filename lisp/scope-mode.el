;;; scope-mode.el -- Major mode for editing Scope scripts

;; Author: Nikesh Srivastava <niksr@microsoft.com>
;; Created: 4 Jan 2015
;; Keywords: scope-mode.el

;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2 of
;; the License, or (at your option) any later version.

;; This program is distributed in the hope that it will be
;; useful, but WITHOUT ANY WARRANTY; without even the implied
;; warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
;; PURPOSE.  See the GNU General Public License for more details.

;; You should have received a copy of the GNU General Public
;; License along with this program; if not, write to the Free
;; Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
;; MA 02111-1307 USA

;;; Commentary:
;;
;; This mode is to make internal Microsoft developers lives
;; easier if they want to use Emacs to write Scope scripts.

;;; Code:
(defvar scope-mode-hook nil)
(defvar scope-mode-map
  (let ((scope-mode-map (make-keymap)))
    scope-mode-map)
    ;; TODO: Add key binding to compile script locally
    ;; TODO: Add key binding to submit script to a VC
  "Keymap for SCOPE major mode")

;;; autoload .script files using scope-mode
(add-to-list 'auto-mode-alist '("\\.script\\'" . scope-mode))
(add-to-list 'auto-mode-alist '("\\.module\\'" . scope-mode))

(defconst scope-font-lock-keywords
  (list
   ; The regexps are autogenerated via regexp-opt, the list of words 
   ; is located in ScopeKeywords.txt

   ; These define the aggregates in the SCOPE language
   ;
   ; Note, putting this line above the font-lock-builtin-face regexp is important.
   ;
   ; The reason is that when generating the font-lock-builtin-face regexp,
   ; I didn't setup groups properly. If this line is put after, 'IN', 'AS' in
   ; between words would be highlighted with the wrong color.
   ;
   ; It shouldn't be this way, but I'm lazy and it's 4 a.m.
   '("\\(?:A\\(?:NY\\|R\\(?:GMAX\\|RAY_AGG\\)\\|VG\\)\\|COUNT\\(?:IF\\)?\\|FIRST\\|L\\(?:[AI]ST\\)\\|M\\(?:AX\\|IN\\)\\|REGEX\\|S\\(?:TDEV\\|UM\\)\\|VAR\\)" . font-lock-keyword-face)
    ;; (regexp-opt
    ;;  '(
    ;;    "ANY"
    ;;    "SUM"
    ;;    "COUNT"
    ;;    "AVG"
    ;;    "MAX"
    ;;    "MIN"
    ;;    "ARGMAX"
    ;;    "COUNTIF"
    ;;    "FIRST"
    ;;    "LAST"
    ;;    "LIST"
    ;;    "VAR"
    ;;    "STDEV"
    ;;    "REGEX"
    ;;    "LIST"
    ;;    "ARRAY_AGG"
    ;;    ))

   ; These define the beginning of keywords in the SCOPE language.
   '("\\(?:#\\(?:CS\\|DECLARE\\|E\\(?:LSE\\(?:IF\\)?\\|ND\\(?:CS\\|IF\\)\\)\\|IF\\|SET\\)\\|A\\(?:LL\\|ND\\|PPLY\\|SC?\\)\\|B\\(?:E\\(?:\\(?:GI\\|TWEE\\)N\\)\\|Y\\)\\|C\\(?:LUSTERED\\|O\\(?:LUMNGROUPS\\|MBINE\\)\\|R\\(?:EATE\\|OSS\\)\\|U\\(?:ME_DIST\\|RRENT ROW\\)\\)\\|D\\(?:E\\(?:FINE\\|NSE_RANK\\|SC\\)\\|IS\\(?:\\(?:JOIN\\|TINC\\)T\\)\\)\\|E\\(?:ND\\|X\\(?:\\(?:CEP\\|POR\\|TRAC\\)T\\)\\)\\|F\\(?:ROM\\|U\\(?:LL\\|NC\\)\\)\\|GROUP\\|HA\\(?:SH\\|VING\\)\\|I\\(?:MPORT\\|N\\(?:NER\\|TERSECT\\)\\|[FN]\\)\\|JOIN\\|LEFT\\|MODULE\\|N\\(?:OT\\|TILE\\|ULL\\)\\|O\\(?:RDER\\|UT\\(?:ER\\|PUT\\)\\|VER\\|[NR]\\)\\|P\\(?:A\\(?:R\\(?:AMS\\|TITION\\)\\|TTERN\\)\\|ERCENT\\(?:ILE_\\(?:CONT\\|DISC\\)\\|_RANK\\)?\\|R\\(?:E\\(?:CEDING\\|SORT\\)\\|O\\(?:CESS\\|DUCE\\)\\)\\)\\|R\\(?:AN\\(?:GE\\|K\\)\\|E\\(?:DUCE\\|FERENCES?\\|SOURCE\\|TURN\\)\\|IGHT\\|OW\\(?:S\\(?:ET\\)?\\|_NUMBER\\)\\)\\|S\\(?:AMPLE\\|CHEMA\\|E\\(?:LECT\\|MIJOIN\\)\\|ORTED\\|PARSE\\|STREAM\\|TREAM\\(?:EXPIRY\\|SET\\)\\)\\|T\\(?:IMERANGE\\|OP?\\)\\|U\\(?:N\\(?:BOUNDED\\|ION\\)\\|SING\\)\\|VIEW\\|W\\(?:HERE\\|ITH\\)\\)" . font-lock-builtin-face)
     ;; (regexp-opt
     ;;  '("EXTRACT"
     ;; 	"FROM"
     ;; 	"USING"
     ;; 	"OUTPUT"
     ;; 	"TO"
     ;; 	"VIEW"
     ;; 	"SELECT"
     ;; 	"WHERE"
     ;; 	"AND"
     ;; 	"OR"
     ;; 	"SORTED"
     ;; 	"NOT"
     ;; 	"AS"
     ;; 	"#CS"
     ;; 	"#ENDCS"
     ;; 	"#DECLARE"
     ;; 	"#IF"
     ;; 	"#ELSE"
     ;; 	"#ELSEIF"
     ;; 	"#ENDIF"
     ;; 	"#SET"
     ;; 	"UNION"
     ;; 	"INTERSECT"
     ;; 	"EXCEPT"
     ;; 	"ALL"
     ;; 	"HAVING"
     ;; 	"REFERENCE"
     ;; 	"REFERENCES"
     ;; 	"TOP"
     ;; 	"DISTINCT"
     ;; 	"DISJOINT"
     ;; 	"IF"
     ;; 	"ORDER"
     ;; 	"BY"
     ;; 	"ASC"
     ;; 	"DESC"
     ;; 	"OVER"
     ;; 	"GROUP"
     ;; 	"CROSS"
     ;; 	"APPLY"
     ;; 	"SSTREAM"
     ;; 	"STREAMSET"
     ;; 	"PATTERN"
     ;; 	"RANGE"
     ;; 	"SPARSE"
     ;; 	"LEFT"
     ;; 	"RIGHT"
     ;; 	"FULL"
     ;; 	"OUTER"
     ;; 	"INNER"
     ;; 	"JOIN"
     ;; 	"SEMIJOIN"
     ;; 	"IN"
     ;; 	"CREATE"
     ;; 	"SCHEMA"
     ;; 	"BEGIN"
     ;; 	"END"
     ;; 	"WITH"
     ;; 	"STREAMEXPIRY"
     ;; 	"PARAMS"
     ;; 	"PROCESS"
     ;; 	"PRODUCE"
     ;; 	"COMBINE"
     ;; 	"WITH"
     ;; 	"ON"
     ;; 	"MODULE"
     ;; 	"FUNC"
     ;; 	"RETURN"
     ;; 	"DEFINE"
     ;; 	"PRESORT"
     ;; 	"PARTITION"
     ;; 	"RESOURCE"
     ;; 	"EXPORT"
     ;; 	"SAMPLE"
     ;; 	"PERCENT"
     ;; 	"TIMERANGE"
     ;; 	"NULL"
     ;; 	"REDUCE"
     ;; 	"COLUMNGROUPS"
     ;; 	"CLUSTERED"
     ;; 	"BETWEEN"
     ;; 	"ROW_NUMBER"
     ;; 	"ROWSET"
     ;; 	"RANK"
     ;; 	"DENSE_RANK"
     ;; 	"NTILE"
     ;; 	"CUME_DIST"
     ;; 	"PERCENT_RANK"
     ;; 	"PERCENTILE_CONT"
     ;; 	"PERCENTILE_DISC"
     ;; 	"HASH"
     ;; 	"IMPORT"
     ;;         "ROWS"
     ;;         "UNBOUNDED"
     ;;         "PRECEDING"
     ;;         "CURRENT ROW"
     ;; 	))


   ; Highlighting for data types
   '("\\(?:ARRAY\\|MAP\\|b\\(?:ool\\|yte\\)\\|char\\|d\\(?:ecimal\\|ouble\\)\\|float\\|int\\|long\\|s\\(?:byte\\|hort\\|tring\\)\\|u\\(?:int\\|long\\|short\\)\\)"      . font-lock-type-face)
     ;; (regexp-opt
     ;;  '("bool"
     ;; 	"byte"
     ;; 	"sbyte"
     ;; 	"char"
     ;; 	"int"
     ;; 	"uint"
     ;; 	"long"
     ;; 	"ulong"
     ;; 	"float"
     ;; 	"double"
     ;; 	"decimal"
     ;; 	"string"
     ;; 	"short"
     ;; 	"ushort"
     ;; 	"MAP"
     ;; 	"ARRAY"))


   ; Strings that have @ in front of them + new style parameters
   ;
   ; TODO: This works for most cases, but it highlights an '@' sign by itself.
   '("@\\(\\w*\\)" . font-lock-string-face))

  "Highlighting expressions for SCOPE mode.")

(defun scope-indent-line ()
  "Indent current line as Scope code."
  (interactive)
  (indent-for-tab-command)
  )

(defvar scope-mode-syntax-table
  (let ((scope-mode-syntax-table (make-syntax-table)))
	
	; Comment styles are same as C++
	(modify-syntax-entry ?\/ ". 12b" scope-mode-syntax-table)
	(modify-syntax-entry ?\n "> b" scope-mode-syntax-table)
	scope-mode-syntax-table)
  "Syntax table for scope-mode")

(defun scope-mode ()
  (interactive)
  (kill-all-local-variables)
  (use-local-map scope-mode-map)
  (set-syntax-table scope-mode-syntax-table)
  ;; Set up font-lock
  (set (make-local-variable 'font-lock-defaults) '(scope-font-lock-keywords))
  ;; Register our indentation function
  ;; (set (make-local-variable 'indent-line-function) 'scope-indent-line) 
  (setq major-mode 'scope-mode)
  (setq mode-name "SCOPE")
  (run-hooks 'scope-mode-hook))

(provide 'scope-mode)
